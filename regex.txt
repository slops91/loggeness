06-07 11:17:45.621  1000  9349  9349 I 
06-07 11:17:45.625  root     0     0 I    
06-07 13:08:23.394 10044  3584  3584 I
06-07 13:08:23.416  1000  1972  2630 D
06-07 13:08:23.303  root  1121  1121 I
06-07 13:08:23.599  1000  1972 22583 V
06-07 13:08:23.644  1000  1972 23301 I
06-07 13:04:36.979 10044  3584  3584 V
06-07 13:04:36.418  wifi  3520  3520 W
06-07 13:04:33.946 radio  3225  3225 I
06-07 13:06:52.326 media  1627  1627 I
06-07 13:06:52.562  1041 21571 21571 I 
06-07 13:12:27.427 10345 12950 25502 D 
06-07 13:11:20.490  1002  3965  4183 I
log_entry_regex = r"\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}\s+(?:\d+|[a-zA-Z]+)\s+\d+\s+\d+\s+[IDVW]"
import re

# Define the regex pattern for the initial log entry
initial_log_entry_regex = re.compile(r"\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}\s+(?:\d+|[a-zA-Z]+)\s+\d+\s+\d+\s+[IDVW]")

import re

# Define the regex pattern for the initial log entry
initial_log_entry_regex = re.compile(r"\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}\s+(?:\d+|[a-zA-Z]+)\s+\d+\s+\d+\s+[IDVW]")

# Define the sequence of lines to search for
sequence_of_lines = [
    r"SecBluetoothBroadcastSource: startBroadcast By user action",
    r"BluetoothLeBroadcast: startBroadcasting",
    r"bt stack: \[INFO:broadcaster.cc \(652\)\] CreateAudioBroadcast CreateAudioBroadcast",
    r"LeAudioService: startBroadcast",
    r"bt_stack: \[INFO:state_machine.cc\(423\)\] CreateBig broadcast_id=\d+",
    r"bluetooth: packages/modules/Bluetooth/system/bta/le_audio/broadcaster/state_machine.cc:603 HandleciEvent: BIG create BIG complete, big_id=\d+",
    r"bluetooth: packages/modules/Bluetooth/system/bta/le_audio/broadcaster/state_machine.c:533 TriggerIsoDatapathSetup: conn_hdl=\d+",
    r"bluetooth: packages/modules/Bluetooth/system/bta/le_audio/broadcaster/state_machine.cc:533 TriggerIsoDatapathSetup: conn_hdl=\d+",
    r"bt_stack: \[INFO:broadcaster.cc \(1118\)\] OnStateMachineEvent broadcast id\d+ state=STREAMING"
]

# Compile the sequence of regex patterns
compiled_sequence = [re.compile(pattern) for pattern in sequence_of_lines]

def search_independent_patterns(filename):
    try:
        with open(filename, 'r', encoding='utf-8', errors='ignore') as file:
            lines = file.readlines()
            found_initial_entry = False

            # Search for the initial log entry and sequence of lines independently
            for line in lines:
                if initial_log_entry_regex.match(line):
                    print(f"Initial log entry matched: {line.strip()}")
                    found_initial_entry = True

                for regex in compiled_sequence:
                    if regex.search(line):
                        print(f"Matched: {line.strip()}")
                        break

            if not found_initial_entry:
                print("No initial log entry found.")

    except FileNotFoundError:
        print(f"The file {filename} does not exist.")
    except IOError:
        print(f"An error occurred while reading the file {filename}.")

# Example usage
search_independent_patterns('sample.txt')
